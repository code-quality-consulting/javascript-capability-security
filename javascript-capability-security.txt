Capability Security and Pure Functional Programming in JSLinted Javascript

Capability-based security and Functional Programming both seek to implement a "minimum necessary interface" sufficient to interact with the outside world. But their individual implementations appear incompatible--capability-based security employs mutable state where functional programming avoids it. Such a conflict is commonplace in production code, where it is often difficult to make extensive use of pure or immutable structures.

This workshop will discuss strategies the Javascript programmer can employ to manage areas of mutable state while maintaining secure, syntactically unambiguous code. We will use JSLint Javascript to contrast the Facet Pattern with Redux, which employs the Flux architecture, and demonstrate our strategies for using pure functional programming to implement capability-based security.

At the end of this session, programmers will understand the behavior of mutable state within a Javascript closure and know strategies for writing secure programs in Javascript that are literate, easy to reason about, and consistent with the principles of Pure Functional Programming.
